开发手册
************第一天链接git**************
git使用手册：
// git仓库同步 步骤  
// 一  git add . 提交本地代码进入缓存区 
// 二  git commit -m 'project init' 缓存区提交到本地仓库进行项目初始化
// 三  git push  将本机仓库代码推送至线上hub库中

//git分支合并
//一 切换分支 git checkout master
//二 合并 git merge origin/(要合并的项目)xxxx
//三 推送刷新 git push


// git 分支创建
// 一 云平台创建分支
// 二 git pull
// 三 git checkout 新分支名称
// 四 git status查看现在对接分支 git branch查看所有分支

github 远程创建分支
git branch 查看当前分支
git branch -r 查看远程分支
git branch -a 查看所有分支

链接GitHub线上仓库同步方式

方法一：
      在线上创建一个仓库，创建成功后复制clone地址,在开发目录下输入 git clone [复制的地址]
      将使用vue create 的项目除了gitnone全部复制到该目录下，运行手册中git仓库同步，输入用户名密码远程仓库的同步

方法二：
      在线上创建一个仓库，且这个项目必须是空项目，所有可选的配置文件都选none，根据仓库提示命令，进行线上和线下本地仓库的链接，后续如上进行同步仓库

****************************************************************
第二课：划分目录结构
src下开发目录的划分
assets —— 放一些本地css和img
common —— 放一些公共js代码
components —— 公共组件
|
  -common ——  类似可以通用的组件
  |
  -content —— 只有在这个项目可以用的组件
network ——  一些网络请求的封装
router  ——  前端路由的划分
store —— vuex的一些数据封账
views ——  一些page的页面以及对应的父子组件放在这里

第三课 样式初始化
项目的CSS初始化很重要，这里推荐GitHub大神写的css reset样式
使用base.css 引入组件中使用

第四课 vue.config和editorconfig
对应的cli3导入路径别名的配置
module.exports = {
  configureWebpack: {
    resolve: {
      alias: {
        'assets': '@/assets',
        'network': '@/network',
        'common': '@/common',
        'components': '@/components',
        'views': '@/views'

      }
    }
  }
}

第三节课划分tabbar
  首先我们项目开发的时候首先可以将我们的导航做好
  具体可以参考之前做的tabbar的开发

第四节课 nav的开发  在git上创建分支 nav-start
  操作创建了公共组件navBar components/common/navBar.vue
  在home界面进行组件加载，运行环境调试
  完成后同步仓库 分支名nav-start

第五节课 
网络后台数据连接
这里是用了我们提前准备好的public-tools  ./network的路径下单axiosmain.js组件。
各个组件功能介绍：
  axiosmain------作为一个核心组件axios框架引用的功能封装，例如拦截器和baseUrl和响应时
  间的设置，最后导出接口供组件或者面向其他对象使用
  home(面对页面名字).js-------

通过对应view页面
  通过网络页面创建数据获得对应轮播图的数据，
  加载vant的轮播组件，通过vantAPI获得安装并且写入相关配置，并且导入，这里推荐放在一个单独js文件里引用
  common/plugin/vant.js
  创建一个轮播的公共组件通过slot插槽的方式提供给对应的view使用
  view组件只需要导入组件就可以代替替代插槽里内容就可以了
填坑须知-----
  vant推荐轮播的懒加载功能会导致 指示器显示数量不正确从而不显示。
  UPDATE：更新了图片防抖动技术 在view/home中vsi-box中加入css图片防止抖动技术

第六节课 推送信息组件搭建
  建立一个推送组件，详情请看home组件下子组件RecommendView
  利用弹性布局做到的一列4个进行布局
  封装成home的子组件进行挂载
  完成后同步仓库

第七课  tab组件
vue获得dom对象的小tips：
ref绑定一个组件或者元素，通过$refs.refname获得组件对象/元素对象

这里可以使用公共组件vant-ui进行开发
在公共组件js里加载tab 
使用这个组件，配合grid宫格一起使用，或可以自己写宫格
这里面涉及到数据结构 goods:{
              "news":{page:5,list:[150]},
              "pop"：{page:2,list:[60]},
              "sell":{page:1,list:[30]}
          }
根据每条数据显示30条数据，下拉会增加数组的长度，故会增加list的长度,
根据页面拉升我们在宫图格中使用了绝对定位加弹性布局的方式进行商品成列的展示

使用better-scroll 做滚动
请打开better-scroll  api进行学习
CSS只是点补充 
--每个组件下面的Scope是作用域，加了这个代表这个css样式只在这个组件里有效
--height:100vh vh-viewport height为100视口 等于100%

滚动制作思路
将需要滚动的部分通过封装第三方better-scroll包裹设定固定高度，这里是通过用定位的方式来设定的它的滚动区域，

总结tab涉及遵循了项目树原则，home/hometab/3个项目对应的分支来进行开发的，所以涉及到传参数比较多。

组件监听函数的小tips:

组件监听和html基本元素监听不一样

第八课 制作返回顶部小按钮，
每周一坑:由于better-scroll于vant-swiper 出现的滑动触发click冒泡坑，
由于swiper和better scroll使用了带fastclick的功能 需要在轮播的van-swipe加上相对属性（详情请见vant api）
传送定位功能实现：
通过绑定子组件对象进行，获取子组件中better-scroll对象通过api中的scrollTo(0, 0, 1000)进行xy速度的传参并且进行定位

用定位将案件定位完毕并显示提前，随后从Scroll中自定义事件子传父组件将监听滚动的定位置p传出，父组件接受后进行传值判断大小给出案件是否显示 

点击进行了优化fastclick组件已加载

第九课 上拉加载更多
  通过组件绑定属性
  通过tab标签页子组件获得3个事件，pullingup(监听上拉加载行为)，change(点击标签返回当前组件)，rendred(渲染刷新) 通过自定义事件进行数据请求加载 ,change和rendred是为了confirm这个当前标签的名来匹配pillingup下拉所要加载的数据
  
bug修复，
这里有一套最新的滑动下拉出现卡顿bug修复
原因：
    scroll判断可下拉文字,图片未加载完毕导致所加载长度为无图片状态的长度，引起的滑动卡顿。
解决：
    scroll的刷新功能，当触发图片加载完毕时候回调scroll刷新函数
    用到的知识点:通过$bus 事件总线类似vuex的功能进行解决，当每一张宫格图加载完毕时,会触发一次这个方法,到这个全局事件中，然后在home的组件中同时响应这个方法也进行函数的回调，从而进行scroll.refresh()操作